generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rental {
  id        Int      @id @default(autoincrement())
  userId    Int
  itemId    Int
  startDate DateTime
  endDate   DateTime
  totalCost Float
  createdAt DateTime @default(now())
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  password    String
  role        String
  trust_score Int?
  items       Item[]
  rentals     Rental[]
  reviews     Review[] @relation("UserReviews") // Added relation to connect reviews by renter
}

model Item {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  price        Float
  url          String
  category     String
  isAvailable  Boolean
  rentDuration Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  slug         String   @unique
  ownerId      Int
  owner        User     @relation(fields: [ownerId], references: [id])
  rentals      Rental[]
  reviews      Review[] @relation("ItemReviews") // Added explicit relation for item reviews
}

model Review {
  id         Int      @id @default(autoincrement())
  renterId   Int      // Added renterId to identify the user being reviewed
  trustScore Int      // Score (0-100)
  comment    String
  itemId     Int
  createdAt  DateTime @default(now())
  item       Item     @relation(fields: [itemId], references: [id], name: "ItemReviews") // Bidirectional relation with Item
  renter     User     @relation(fields: [renterId], references: [id], name: "UserReviews") // Bidirectional relation with User
}
