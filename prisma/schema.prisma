datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Rental {
  id        Int      @id @default(autoincrement())
  userId    Int
  itemId    Int
  startDate DateTime
  endDate   DateTime
  totalCost Float
  createdAt DateTime @default(now())
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id             Int             @id @default(autoincrement())
  username       String          @unique
  email          String          @unique
  password       String
  role           String
  trust_score    Int?
  items          Item[]
  rentals        Rental[]
  itemReviews    ItemReview[]    @relation("UserItemReviews")  // Relation to item reviews
  renterReviews  RenterReview[]  @relation("UserRenterReviews") // Relation to reviews received as a renter
  ownerReviews   RenterReview[]  @relation("OwnerRenterReviews") // Relation to reviews given as an owner
}

model Item {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  price        Float
  url          String
  category     String
  isAvailable  Boolean
  rentDuration Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  slug         String        @unique
  ownerId      Int
  owner        User          @relation(fields: [ownerId], references: [id])
  rentals      Rental[]
  itemReviews  ItemReview[]  @relation("ItemItemReviews") // Relation to item reviews
}

model ItemReview {
  id        Int      @id @default(autoincrement())
  rating    Int      // Rating for the item (1-5)
  comment   String   // Review text for the item
  itemId    Int      // Item being reviewed
  renterId  Int      // Renter who is reviewing the item
  createdAt DateTime @default(now())

  item      Item     @relation(fields: [itemId], references: [id], name: "ItemItemReviews")
  renter    User     @relation(fields: [renterId], references: [id], name: "UserItemReviews")
}

model RenterReview {
  id         Int      @id @default(autoincrement())
  trustScore Int      // Trust score for the renter (0-100)
  comment    String   // Feedback about the renter
  renterId   Int      // Renter being reviewed
  ownerId    Int      // Owner reviewing the renter
  createdAt  DateTime @default(now())

  renter     User     @relation(fields: [renterId], references: [id], name: "UserRenterReviews")
  owner      User     @relation(fields: [ownerId], references: [id], name: "OwnerRenterReviews")
}
